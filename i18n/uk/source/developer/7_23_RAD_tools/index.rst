
.. i18n: =========
.. i18n: RAD Tools 
.. i18n: =========

=========
RAD Tools 
=========

.. i18n: DIA
.. i18n: ===
.. i18n: 	
.. i18n: The uml_dia module helps to develop new modules after an UML description using the DIA tool (http://www.gnome.org/projects/dia).

DIA
===
	
The uml_dia module helps to develop new modules after an UML description using the DIA tool (http://www.gnome.org/projects/dia).

.. i18n: It's not a typical module in the sense that you don't have to install it on the server as another module. The contents of the module are just a python script for dia (codegen_openerp.py), a test dia diagram and the module generated by the test.

It's not a typical module in the sense that you don't have to install it on the server as another module. The contents of the module are just a python script for dia (codegen_openerp.py), a test dia diagram and the module generated by the test.

.. i18n: The module is located in the extra_addons branch: https://code.launchpad.net/openobject-addons

The module is located in the extra_addons branch: https://code.launchpad.net/openobject-addons

.. i18n: To use the module you need to make **codegen_openerp.py** accesible from dia, usually in your **/usr/share/dia/python** directory and make sure that it gets loaded once. To do it, just open dia and open a **Python Console** from the **Dialog Menu**, and type there "import codegen_openerp". If everything goes alright you will have a new option in your "Export..." dialog named "PyDia Code Generation (OpenERP)" that will create a zip module from your UML diagram.

To use the module you need to make **codegen_openerp.py** accesible from dia, usually in your **/usr/share/dia/python** directory and make sure that it gets loaded once. To do it, just open dia and open a **Python Console** from the **Dialog Menu**, and type there "import codegen_openerp". If everything goes alright you will have a new option in your "Export..." dialog named "PyDia Code Generation (OpenERP)" that will create a zip module from your UML diagram.

.. i18n: To install win Dia in windows, first install Python-2.2, then when you install Dia, you will have an option to install the python plug-in. After this, put the codegen_openerp.py file in C:\Program Files\Dia and you will have the export function in Dia.

To install win Dia in windows, first install Python-2.2, then when you install Dia, you will have an option to install the python plug-in. After this, put the codegen_openerp.py file in C:\Program Files\Dia and you will have the export function in Dia.

.. i18n: If you find that the zip file is corrupt, use DiskInternals ZipRepair utility to repair the zip file before you'll be able to import it - make sure the zip file you import has the same name you saved as. 

If you find that the zip file is corrupt, use DiskInternals ZipRepair utility to repair the zip file before you'll be able to import it - make sure the zip file you import has the same name you saved as. 

.. i18n: Open Office Report Designer
.. i18n: ===========================
.. i18n: Select Tiny Report > Server parameters or Open ERP Report > Server parameters in the top menu of OpenOffice.org Writer. You can then enter your connection parameters to the Open ERP server. You must select a database \ ``demo_min``\   in which you've already installed the module \ ``sale``\  . A message appears if you've made a successful connection.

Open Office Report Designer
===========================
Select Tiny Report > Server parameters or Open ERP Report > Server parameters in the top menu of OpenOffice.org Writer. You can then enter your connection parameters to the Open ERP server. You must select a database \ ``demo_min``\   in which you've already installed the module \ ``sale``\  . A message appears if you've made a successful connection.

.. i18n: .. index::
.. i18n:    single: Report; Modify
.. i18n: ..

.. index::
   single: Report; Modify
..

.. i18n: Modifying a report
.. i18n: -------------------

Modifying a report
-------------------

.. i18n: The report editor lets you:

The report editor lets you:

.. i18n: * modify existing reports which will then replace the originals in your Open ERP database,
.. i18n: 
.. i18n: * create new reports for the selected object.

* modify existing reports which will then replace the originals in your Open ERP database,

* create new reports for the selected object.

.. i18n: To modify an existing report, select  *Tiny Report > Modify Existing Report* . Choose the report \ ``Request for 	 Quotation``\   in the  *Modify Existing Report*  dialog box and then click  *Save to Temp Directory* .

To modify an existing report, select  *Tiny Report > Modify Existing Report* . Choose the report \ ``Request for 	 Quotation``\   in the  *Modify Existing Report*  dialog box and then click  *Save to Temp Directory* .

.. i18n: .. image::  images/openoffice_quotation.png
.. i18n:    :align: center

.. image::  images/openoffice_quotation.png
   :align: center

.. i18n: *Modifying a document template*

*Modifying a document template*

.. i18n: OpenOffice.org then opens the report in edit mode for you. You can modify it using the standard word processing functions of OpenOffice.org Writer.

OpenOffice.org then opens the report in edit mode for you. You can modify it using the standard word processing functions of OpenOffice.org Writer.

.. i18n: The document is modified in its English version. It will be translated as usual by Open ERP's translation system when you use it through the client interface, if you've personalized your own setup to translate to another language for you. So you only need to modify the template once, even if your system uses other languages – but you'll need to add translations as described earlier in this chapter if you add fields or change the content of the existing ones.

The document is modified in its English version. It will be translated as usual by Open ERP's translation system when you use it through the client interface, if you've personalized your own setup to translate to another language for you. So you only need to modify the template once, even if your system uses other languages – but you'll need to add translations as described earlier in this chapter if you add fields or change the content of the existing ones.

.. i18n: .. tip::   **Attention**  *Older reports*

.. tip::   **Attention**  *Older reports*

.. i18n: The older reports haven't all been converted into the new form supported by Open ERP. The data expressions in the old format are shown within double brackets and not in OpenOffice.org fields.

The older reports haven't all been converted into the new form supported by Open ERP. The data expressions in the old format are shown within double brackets and not in OpenOffice.org fields.

.. i18n: You can transform an old report format to the new format from the OpenOffice.org menu Tiny Report > Convert Bracket–Fields.

You can transform an old report format to the new format from the OpenOffice.org menu Tiny Report > Convert Bracket–Fields.

.. i18n: From the Tiny toolbar in OpenOffice.org it's possible to:

From the Tiny toolbar in OpenOffice.org it's possible to:

.. i18n: * connect to the Open ERP server: by supplying the connection parameters.
.. i18n: 
.. i18n: * add a loop: select a related field amongst the available fields from the proposed object, for example \ ``Order lines``\  . When it's printed this loop will be run for each line of the order. The loop can be put into a table (the lines will then be repeated) or into an OpenOffice.org section.
.. i18n: 
.. i18n: * add a field: you can then go through the whole Open ERP database from the selected object and then a particular field.
.. i18n: 
.. i18n: * add an expression: enter an expression in the Python language to calculate values from any fields in the selected object.

* connect to the Open ERP server: by supplying the connection parameters.

* add a loop: select a related field amongst the available fields from the proposed object, for example \ ``Order lines``\  . When it's printed this loop will be run for each line of the order. The loop can be put into a table (the lines will then be repeated) or into an OpenOffice.org section.

* add a field: you can then go through the whole Open ERP database from the selected object and then a particular field.

* add an expression: enter an expression in the Python language to calculate values from any fields in the selected object.

.. i18n: .. tip::   **Technique**  *Python Expressions*

.. tip::   **Technique**  *Python Expressions*

.. i18n: Using the Expression button you can enter expressions in the Python language. These expressions can use all of the object's fields for their calculations.

Using the Expression button you can enter expressions in the Python language. These expressions can use all of the object's fields for their calculations.

.. i18n: For example if you make a report on an order you can use the following expression:

For example if you make a report on an order you can use the following expression:

.. i18n: .. code-block:: python
.. i18n: 
.. i18n:   '%.2f' % (amount_total * 0.9,)

.. code-block:: python

  '%.2f' % (amount_total * 0.9,)

.. i18n: .. *

.. *

.. i18n: In this example, amount_total is a field from the order object. The result will be 90% of the total of the order, formatted to two decimal places.

In this example, amount_total is a field from the order object. The result will be 90% of the total of the order, formatted to two decimal places.

.. i18n:  *Tiny Report > Send to server*  *Technical Name*  *Report Name* \ ``Sale Order Mod``\   *Corporate Header*  *Send Report to Server*

 *Tiny Report > Send to server*  *Technical Name*  *Report Name* \ ``Sale Order Mod``\   *Corporate Header*  *Send Report to Server*

.. i18n: You can check the result in Open ERP using the menu  *Sales Management > Sales Orders > All Orders* .

You can check the result in Open ERP using the menu  *Sales Management > Sales Orders > All Orders* .

.. i18n: .. index::
.. i18n:    single: Report; New
.. i18n: ..

.. index::
   single: Report; New
..

.. i18n: Creating a new report
.. i18n: ---------------------

Creating a new report
---------------------

.. i18n:  *Tiny Report > Open a new report* \ ``Sale Order``\   *Open New Report*  *Use Model in Report*

 *Tiny Report > Open a new report* \ ``Sale Order``\   *Open New Report*  *Use Model in Report*

.. i18n: The general template is made up of loops (such as the list of selected orders) and fields from the object, which can also be looped. Format them to your requirements then save the template.

The general template is made up of loops (such as the list of selected orders) and fields from the object, which can also be looped. Format them to your requirements then save the template.

.. i18n: The existing report templates make up a rich source of examples. You can start by adding the loops and several fields to create a minimal template.

The existing report templates make up a rich source of examples. You can start by adding the loops and several fields to create a minimal template.

.. i18n: When the report has been created, send it to the server by clicking  *Tiny Report > Send to server* , which brings up the  *Send to server*  dialog box. Enter the  *Technical Name*  of \ ``sale.order``\  , to make it appear beside the other sales order reports. Rename the template as \ ``Sale Order New``\   in  *Report Name* , check the checkbox  *Corporate Header*  and finally click  *Send Report to Server* .

When the report has been created, send it to the server by clicking  *Tiny Report > Send to server* , which brings up the  *Send to server*  dialog box. Enter the  *Technical Name*  of \ ``sale.order``\  , to make it appear beside the other sales order reports. Rename the template as \ ``Sale Order New``\   in  *Report Name* , check the checkbox  *Corporate Header*  and finally click  *Send Report to Server* .

.. i18n: To send it to the server, you can specify if you prefer Open ERP to produce a PDF when the user prints the document, or if Open ERP should open the document for editing in OpenOffice.org Writer before printing. To do that choose \ ``PDF``\   or \ ``SXW``\   (a format of OpenOffice.org documents) in the field  *Select Report Type*

To send it to the server, you can specify if you prefer Open ERP to produce a PDF when the user prints the document, or if Open ERP should open the document for editing in OpenOffice.org Writer before printing. To do that choose \ ``PDF``\   or \ ``SXW``\   (a format of OpenOffice.org documents) in the field  *Select Report Type*

.. i18n: Open ERP objects can be created from PostgreSQL views. The technique is as follows :

Open ERP objects can be created from PostgreSQL views. The technique is as follows :

.. i18n:    1. Declare your _columns dictionary. All fields must have the flag readonly=True.
.. i18n:    2. Specify the parameter _auto=False to the Open ERP object, so no table corresponding to the _columns dictionnary is created automatically.
.. i18n:    3. Add a method init(self, cr) that creates a PostgreSQL View matching the fields declared in _columns. 

   1. Declare your _columns dictionary. All fields must have the flag readonly=True.
   2. Specify the parameter _auto=False to the Open ERP object, so no table corresponding to the _columns dictionnary is created automatically.
   3. Add a method init(self, cr) that creates a PostgreSQL View matching the fields declared in _columns. 

.. i18n: Example The object report_crm_case_user follows this model.

Example The object report_crm_case_user follows this model.

.. i18n: .. code-block:: python
.. i18n: 
.. i18n:         report_crm_case_user(osv.osv):
.. i18n:              _name = "report.crm.case.user"
.. i18n:              _description = "Cases by user and section"
.. i18n:              _auto = False
.. i18n:              _columns = {
.. i18n:                 'name': fields.date('Month', readonly=True),
.. i18n:                 'user_id':fields.many2one('res.users', 'User', readonly=True, relate=True),
.. i18n:                 'section_id':fields.many2one('crm.case.section', 'Section', readonly=True, relate=True),
.. i18n:                 'amount_revenue': fields.float('Est.Revenue', readonly=True),
.. i18n:                'amount_costs': fields.float('Est.Cost', readonly=True),
.. i18n:                 'amount_revenue_prob': fields.float('Est. Rev*Prob.', readonly=True),
.. i18n:                 'nbr': fields.integer('# of Cases', readonly=True),
.. i18n:                'probability': fields.float('Avg. Probability', readonly=True),
.. i18n:                 'state': fields.selection(AVAILABLE_STATES, 'State', size=16, readonly=True),
.. i18n:                 'delay_close': fields.integer('Delay to close', readonly=True),
.. i18n:             }
.. i18n:              _order = 'name desc, user_id, section_id'
.. i18n:          
.. i18n:             def init(self, cr):
.. i18n:                 cr.execute("""
.. i18n:                      create or replace view report_crm_case_user as (
.. i18n:                          select
.. i18n:                              min(c.id) as id,
.. i18n:                              substring(c.create_date for 7)||'-01' as name,
.. i18n:                              c.state,
.. i18n:                              c.user_id,
.. i18n:                              c.section_id,
.. i18n:                              count(*) as nbr,
.. i18n:                              sum(planned_revenue) as amount_revenue,
.. i18n:                              sum(planned_cost) as amount_costs,
.. i18n:                              sum(planned_revenue*probability)::decimal(16,2) as amount_revenue_prob,
.. i18n:                              avg(probability)::decimal(16,2) as probability,
.. i18n:                              to_char(avg(date_closed-c.create_date), 'DD"d" `HH24:MI:SS') as delay_close
.. i18n:                          from
.. i18n:                              crm_case c
.. i18n:                          group by substring(c.create_date for 7), c.state, c.user_id, c.section_id
.. i18n:                 )""")
.. i18n:         report_crm_case_user()

.. code-block:: python

        report_crm_case_user(osv.osv):
             _name = "report.crm.case.user"
             _description = "Cases by user and section"
             _auto = False
             _columns = {
                'name': fields.date('Month', readonly=True),
                'user_id':fields.many2one('res.users', 'User', readonly=True, relate=True),
                'section_id':fields.many2one('crm.case.section', 'Section', readonly=True, relate=True),
                'amount_revenue': fields.float('Est.Revenue', readonly=True),
               'amount_costs': fields.float('Est.Cost', readonly=True),
                'amount_revenue_prob': fields.float('Est. Rev*Prob.', readonly=True),
                'nbr': fields.integer('# of Cases', readonly=True),
               'probability': fields.float('Avg. Probability', readonly=True),
                'state': fields.selection(AVAILABLE_STATES, 'State', size=16, readonly=True),
                'delay_close': fields.integer('Delay to close', readonly=True),
            }
             _order = 'name desc, user_id, section_id'
         
            def init(self, cr):
                cr.execute("""
                     create or replace view report_crm_case_user as (
                         select
                             min(c.id) as id,
                             substring(c.create_date for 7)||'-01' as name,
                             c.state,
                             c.user_id,
                             c.section_id,
                             count(*) as nbr,
                             sum(planned_revenue) as amount_revenue,
                             sum(planned_cost) as amount_costs,
                             sum(planned_revenue*probability)::decimal(16,2) as amount_revenue_prob,
                             avg(probability)::decimal(16,2) as probability,
                             to_char(avg(date_closed-c.create_date), 'DD"d" `HH24:MI:SS') as delay_close
                         from
                             crm_case c
                         group by substring(c.create_date for 7), c.state, c.user_id, c.section_id
                )""")
        report_crm_case_user()
