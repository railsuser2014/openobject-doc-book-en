
Module Hotel Restaurant (*hotel_restaurant*)
============================================
:Module: hotel_restaurant
:Name: Hotel Restaurant
:Version: 5.0.1.0
:Directory: hotel_restaurant
:Web: 

Description
-----------

::

  Module for Hotel/Resort/Restaurant management. You can manage:
      * Configure Property
      * Restaurant Configuration
      * table reservation
      * Generate and process Kitchen Order ticket,
      * Payment
  
      Different reports are also provided, mainly for Restaurant.

Dependencies
------------

 * base - installed
 * hotel - installed

Reports
-------

 * Kitchen Order Tickets

 * Customer Bill

 * Table Reservation List

Menus
-------

 * Hotel Restaurant
 * Hotel Restaurant/Configuration
 * Hotel Restaurant/Configuration/Tables
 * Hotel Restaurant/Reservation
 * Hotel Restaurant/Reservation/Table Booking
 * Hotel Restaurant/Reservation/Orders
 * Hotel Restaurant/Table Order
 * Hotel Restaurant/KOT
 * Hotel Restaurant/Configuration/FoodItem Types
 * Hotel Restaurant/Configuration/Menucard
 * Hotel Restaurant/Reservation List

Views
-----

 * hotel_restaurant_tables.form (form)
 * hotel_restaurant_tables.tree (tree)
 * hotel_restaurant_reservation.form (form)
 * hotel_restaurant_reservation.tree (tree)
 * hotel_reservation_order.form (form)
 * hotel_reservation_order.tree (tree)
 * hotel_restaurant_order.form (form)
 * hotel_restaurant_order.tree (tree)
 * hotel_restaurant_kitchen_order_tickets.form (form)
 * hotel_restaurant_kitchen_order_tickets.tree (tree)
 * hotel_menucard_type_form (form)
 * hotel_menucard_type_list (tree)
 * hotel.menucard.form (form)
 * hotel.menucard.tree (tree)


Objects
-------

Object: amenities Type
######################

.. index::
  single: amenities Type object
.. 


:menu_id: category, many2one, required



.. index::
  single: menu_id field
.. 




:property_account_expense_categ: Expense Account, many2one

    *This account will be used, instead of the default one, to value outgoing stock for the current product category*

.. index::
  single: property_account_expense_categ field
.. 




:property_stock_journal: Stock journal, many2one

    *This journal will be used for the accounting move generated by stock move*

.. index::
  single: property_stock_journal field
.. 




:sequence: Sequence, integer



.. index::
  single: sequence field
.. 




:property_account_expense_europe: Expense Account for Europe, many2one

    *This account will be used, instead of the default one, to value outgoing stock for the current product*

.. index::
  single: property_account_expense_europe field
.. 




:property_stock_account_input_categ: Stock Input Account, many2one

    *This account will be used to value the input stock*

.. index::
  single: property_stock_account_input_categ field
.. 




:property_account_income_categ: Income Account, many2one

    *This account will be used, instead of the default one, to value incoming stock for the current product category*

.. index::
  single: property_account_income_categ field
.. 




:child_id: Childs Categories, one2many



.. index::
  single: child_id field
.. 




:property_stock_account_output_categ: Stock Output Account, many2one

    *This account will be used to value the output stock*

.. index::
  single: property_stock_account_output_categ field
.. 




:name: Name, char, required



.. index::
  single: name field
.. 




:isactivitytype: Is Activity Type, boolean



.. index::
  single: isactivitytype field
.. 




:isroomtype: Is Room Type, boolean



.. index::
  single: isroomtype field
.. 




:property_account_expense_world: Outside Europe Expense Account, many2one

    *This account will be used, instead of the default one, to value outgoing stock for the current product*

.. index::
  single: property_account_expense_world field
.. 




:ismenutype: Is Menu Type, boolean



.. index::
  single: ismenutype field
.. 




:isservicetype: Is Service Type, boolean



.. index::
  single: isservicetype field
.. 




:parent_id: Parent Category, many2one



.. index::
  single: parent_id field
.. 




:property_account_income_world: Outside Europe Income Account, many2one

    *This account will be used, instead of the default one, to value incoming stock for the current product*

.. index::
  single: property_account_income_world field
.. 




:complete_name: Name, char, readonly



.. index::
  single: complete_name field
.. 




:isamenitype: Is amenities Type, boolean



.. index::
  single: isamenitype field
.. 




:property_account_income_europe: Income Account for Europe, many2one

    *This account will be used, instead of the default one, to value incoming stock for the current product*

.. index::
  single: property_account_income_europe field
.. 



Object: Hotel Menucard
######################

.. index::
  single: Hotel Menucard object
.. 


:ean13: EAN UPC JPC GTIN, char



.. index::
  single: ean13 field
.. 




:code: Acronym, char, readonly



.. index::
  single: code field
.. 




:pricelist_purchase: Purchase Pricelists, text, readonly



.. index::
  single: pricelist_purchase field
.. 




:incoming_qty: Incoming, float, readonly

    *Quantities of products that are planned to arrive in selected locations or all internal if none have been selected.*

.. index::
  single: incoming_qty field
.. 




:standard_price: Cost Price, float, required

    *The cost of the product for accounting stock valorisation. It can serves as a base price for supplier price.*

.. index::
  single: standard_price field
.. 




:membership_date_to: Date to, date



.. index::
  single: membership_date_to field
.. 




:size_x: Width, float



.. index::
  single: size_x field
.. 




:size_y: Length, float



.. index::
  single: size_y field
.. 




:size_z: Thickness, float



.. index::
  single: size_z field
.. 




:property_account_income: Income Account, many2one

    *This account will be used, instead of the default one, to value incoming stock for the current product*

.. index::
  single: property_account_income field
.. 




:list_price: Sale Price, float

    *Base price for computing the customer price. Sometimes called the catalog price.*

.. index::
  single: list_price field
.. 




:author_om_ids: Authors, one2many



.. index::
  single: author_om_ids field
.. 




:company_id: Company, many2one



.. index::
  single: company_id field
.. 




:use_time: Product usetime, integer



.. index::
  single: use_time field
.. 




:loc_rack: Rack, char



.. index::
  single: loc_rack field
.. 




:ismenucard: Is Room, boolean



.. index::
  single: ismenucard field
.. 




:price_margin: Variant Price Margin, float



.. index::
  single: price_margin field
.. 




:property_stock_account_input: Stock Input Account, many2one

    *This account will be used, instead of the default one, to value input stock*

.. index::
  single: property_stock_account_input field
.. 




:format: Format, char



.. index::
  single: format field
.. 




:finished_test: Finished Goods testing, one2many

    *Quality Testing configuration for finished goods.*

.. index::
  single: finished_test field
.. 




:is_direct_delivery_from_product: Is Supplier Direct Delivery Automatic?, boolean, readonly



.. index::
  single: is_direct_delivery_from_product field
.. 




:cutting: Can be Cutted, boolean



.. index::
  single: cutting field
.. 




:sale_num_invoiced: # Invoiced, float, readonly

    *Sum of Quantity in Customer Invoices*

.. index::
  single: sale_num_invoiced field
.. 




:variants: Variants, char



.. index::
  single: variants field
.. 




:partner_ref: Customer ref, char, readonly



.. index::
  single: partner_ref field
.. 




:rental: Rentable product, boolean



.. index::
  single: rental field
.. 




:purchase_num_invoiced: # Invoiced, float, readonly

    *Sum of Quantity in Supplier Invoices*

.. index::
  single: purchase_num_invoiced field
.. 




:path_ids: Location Paths, one2many

    *These rules set the right path of the product in the whole location tree.*

.. index::
  single: path_ids field
.. 




:mes_type: Measure Type, selection, required



.. index::
  single: mes_type field
.. 




:name: Name, char, required



.. index::
  single: name field
.. 




:qty_dispo: Stock available, float, readonly



.. index::
  single: qty_dispo field
.. 




:sale_expected: Expected Sale, float, readonly

    *Sum of Multification of Sale Catalog price and quantity of Customer Invoices*

.. index::
  single: sale_expected field
.. 




:seller_ids: Partners, one2many



.. index::
  single: seller_ids field
.. 




:x: X of Product, float



.. index::
  single: x field
.. 




:rack: Rack, many2one



.. index::
  single: rack field
.. 




:isroom: Is Room, boolean



.. index::
  single: isroom field
.. 




:supply_method: Supply method, selection, required

    *Produce will generate production order or tasks, according to the product type. Purchase will trigger purchase orders when requested.*

.. index::
  single: supply_method field
.. 




:orderpoint_ids: Orderpoints, one2many



.. index::
  single: orderpoint_ids field
.. 




:weight: Gross weight, float

    *The gross weight in Kg.*

.. index::
  single: weight field
.. 




:back: Reliure, selection



.. index::
  single: back field
.. 




:creation_date: Creation date, datetime, readonly



.. index::
  single: creation_date field
.. 




:total_margin_rate: Total Margin (%), float, readonly

    *Total margin * 100 / Turnover*

.. index::
  single: total_margin_rate field
.. 




:description_purchase: Purchase Description, text



.. index::
  single: description_purchase field
.. 




:sales_gap: Sales Gap, float, readonly

    *Excepted Sale - Turn Over*

.. index::
  single: sales_gap field
.. 




:removal_time: Product removal time, integer



.. index::
  single: removal_time field
.. 




:virtual_available: Virtual Stock, float, readonly

    *Futur stock for this product according to the selected location or all internal if none have been selected. Computed as: Real Stock - Outgoing + Incoming.*

.. index::
  single: virtual_available field
.. 




:date_retour: Return date, date



.. index::
  single: date_retour field
.. 




:total_cost: Total Cost, float, readonly

    *Sum of Multification of Invoice price and quantity of Supplier Invoices*

.. index::
  single: total_cost field
.. 




:thickness: Thickness, float



.. index::
  single: thickness field
.. 




:product_tmpl_id: Product Template, many2one, required



.. index::
  single: product_tmpl_id field
.. 




:state: State, selection



.. index::
  single: state field
.. 




:life_time: Product lifetime, integer



.. index::
  single: life_time field
.. 




:weight_net: Net weight, float

    *The net weight in Kg.*

.. index::
  single: weight_net field
.. 




:sale_avg_price: Avg. Unit Price, float, readonly

    *Avg. Price in Customer Invoices)*

.. index::
  single: sale_avg_price field
.. 




:manufacturer_pname: Manufacturer product name, char



.. index::
  single: manufacturer_pname field
.. 




:partner_ref2: Customer ref, char, readonly



.. index::
  single: partner_ref2 field
.. 




:purchase_avg_price: Avg. Unit Price, float, readonly

    *Avg. Price in Supplier Invoices*

.. index::
  single: purchase_avg_price field
.. 




:index_purchase: Purchase indexes, many2many



.. index::
  single: index_purchase field
.. 




:manufacturer: Manufacturer, many2one



.. index::
  single: manufacturer field
.. 




:loc_case: Case, char



.. index::
  single: loc_case field
.. 




:property_stock_account_output: Stock Output Account, many2one

    *This account will be used, instead of the default one, to value output stock*

.. index::
  single: property_stock_account_output field
.. 




:lst_price: List Price, float, readonly



.. index::
  single: lst_price field
.. 




:catalog_num: Catalog number, char



.. index::
  single: catalog_num field
.. 




:tome: Tome, char



.. index::
  single: tome field
.. 




:warranty: Warranty (months), float



.. index::
  single: warranty field
.. 




:property_stock_procurement: Procurement Location, many2one

    *For the current product (template), this stock location will be used, instead of the default one, as the source location for stock moves generated by procurements*

.. index::
  single: property_stock_procurement field
.. 




:uos_id: Unit of Sale, many2one

    *Used by companies that manages two unit of measure: invoicing and stock management. For example, in food industries, you will manage a stock of ham but invoice in Kg. Keep empty to use the default UOM.*

.. index::
  single: uos_id field
.. 




:isbn: Isbn code, char



.. index::
  single: isbn field
.. 




:purchase_line_warn_msg: Message for Purchase Order Line, text



.. index::
  single: purchase_line_warn_msg field
.. 




:member_price: Member Price, float



.. index::
  single: member_price field
.. 




:sale_line_warn_msg: Message for Sale Order Line, text



.. index::
  single: sale_line_warn_msg field
.. 




:packaging: Logistical Units, one2many

    *Gives the different ways to package the same product. This has no impact on the packing order and is mainly used if you use the EDI module.*

.. index::
  single: packaging field
.. 




:active: Active, boolean



.. index::
  single: active field
.. 




:production_test: During Production testing, one2many

    *Quality Testing configuration during production.*

.. index::
  single: production_test field
.. 




:qty_available: Real Stock, float, readonly

    *Current quantities of products in selected locations or all internal if none have been selected.*

.. index::
  single: qty_available field
.. 




:num_pocket: Collection Num., char



.. index::
  single: num_pocket field
.. 




:property_account_expense_world1: Outside Europe Expense Account, many2one

    *This account will be used, instead of the default one, to value outgoing stock for the current product*

.. index::
  single: property_account_expense_world1 field
.. 




:uos_coeff: UOM -> UOS Coeff, float

    *Coefficient to convert UOM to UOS
    uom = uos * coeff*

.. index::
  single: uos_coeff field
.. 




:auto_pick: Auto Picking, boolean

    *Auto picking for raw materials of production orders.*

.. index::
  single: auto_pick field
.. 




:expected_margin_rate: Expected Margin (%), float, readonly

    *Expected margin * 100 / Expected Sale*

.. index::
  single: expected_margin_rate field
.. 




:buyer_price_index: Indexed buyer price, float, readonly



.. index::
  single: buyer_price_index field
.. 




:purchase_ok: Can be Purchased, boolean

    *Determine if the product is visible in the list of products within a selection from a purchase order line.*

.. index::
  single: purchase_ok field
.. 




:product_manager: Product Manager, many2one



.. index::
  single: product_manager field
.. 




:width: Width, float



.. index::
  single: width field
.. 




:pricelist_sale: Sale Pricelists, text, readonly



.. index::
  single: pricelist_sale field
.. 




:normal_cost: Normal Cost, float, readonly

    *Sum of Multification of Cost price and quantity of Supplier Invoices*

.. index::
  single: normal_cost field
.. 




:raw_m_test: Raw material testing, one2many

    *Quality Testing configuration for raw material.*

.. index::
  single: raw_m_test field
.. 




:type: Product Type, selection, required

    *Will change the way procurements are processed, consumable are stockable products with infinite stock, or without a stock management in the system.*

.. index::
  single: type field
.. 




:property_account_income_europe: Income Account for Europe, many2one

    *This account will be used, instead of the default one, to value incoming stock for the current product*

.. index::
  single: property_account_income_europe field
.. 




:editor: Editor, many2one



.. index::
  single: editor field
.. 




:lang: Language, many2many



.. index::
  single: lang field
.. 




:price_cat: Price category, many2one



.. index::
  single: price_cat field
.. 




:num_edition: Num. edition, integer



.. index::
  single: num_edition field
.. 




:track_incoming: Track Incomming Lots, boolean

    *Force to use a Production Lot during receptions*

.. index::
  single: track_incoming field
.. 




:property_stock_production: Production Location, many2one

    *For the current product (template), this stock location will be used, instead of the default one, as the source location for stock moves generated by production orders*

.. index::
  single: property_stock_production field
.. 




:supplier_taxes_id: Supplier Taxes, many2many



.. index::
  single: supplier_taxes_id field
.. 




:volume: Volume, float

    *The volume in m3.*

.. index::
  single: volume field
.. 




:package_weight: Package Weight, float



.. index::
  single: package_weight field
.. 




:membership_date_from: Date from, date



.. index::
  single: membership_date_from field
.. 




:date_to: To Date, date, readonly



.. index::
  single: date_to field
.. 




:procure_method: Procure Method, selection, required

    *'Make to Stock': When needed, take from the stock or wait until refurnishing. 'Make to Order': When needed, purchase or produce for the procurement request.*

.. index::
  single: procure_method field
.. 




:property_stock_inventory: Inventory Location, many2one

    *For the current product (template), this stock location will be used, instead of the default one, as the source location for stock moves generated when you do an inventory*

.. index::
  single: property_stock_inventory field
.. 




:cost_method: Costing Method, selection, required

    *Standard Price: the cost price is fixed and recomputed periodically (usually at the end of the year), Average Price: the cost price is recomputed at each reception of products.*

.. index::
  single: cost_method field
.. 




:product_id: Product_id, many2one



.. index::
  single: product_id field
.. 




:sale_delay: Customer Lead Time, float

    *This is the average time between the confirmation of the customer order and the delivery of the finnished products. It's the time you promise to your customers.*

.. index::
  single: sale_delay field
.. 




:description_sale: Sale Description, text



.. index::
  single: description_sale field
.. 




:purchase_line_warn: Purchase Order Line, boolean



.. index::
  single: purchase_line_warn field
.. 




:dimension_ids: Dimensions, many2many



.. index::
  single: dimension_ids field
.. 




:lot_ids: Lots, one2many



.. index::
  single: lot_ids field
.. 




:z: Z of Product, float



.. index::
  single: z field
.. 




:purchase_gap: Purchase Gap, float, readonly

    *Normal Cost - Total Cost*

.. index::
  single: purchase_gap field
.. 




:sale_line_warn: Sale Order Line, boolean



.. index::
  single: sale_line_warn field
.. 




:isservice: Is Service id, boolean



.. index::
  single: isservice field
.. 




:track_production: Track Production Lots, boolean

    *Force to use a Production Lot during production order*

.. index::
  single: track_production field
.. 




:sale_ok: Can be sold, boolean

    *Determine if the product can be visible in the list of product within a selection from a sale order line.*

.. index::
  single: sale_ok field
.. 




:nbpage: Number of pages, integer



.. index::
  single: nbpage field
.. 




:price_extra: Variant Price Extra, float



.. index::
  single: price_extra field
.. 




:uom_id: Default UoM, many2one, required

    *Default Unit of Measure used for all stock operation.*

.. index::
  single: uom_id field
.. 




:default_code: Code, char



.. index::
  single: default_code field
.. 




:attribute_ids: Attributes, one2many



.. index::
  single: attribute_ids field
.. 




:iscategid: Is categ id, boolean



.. index::
  single: iscategid field
.. 




:expected_margin: Expected Margin, float, readonly

    *Excepted Sale - Normal Cost*

.. index::
  single: expected_margin field
.. 




:standard_price_index: Indexed standard price, float, readonly



.. index::
  single: standard_price_index field
.. 




:product_logo: Product Logo, binary



.. index::
  single: product_logo field
.. 




:auto_picking: Auto Picking for Production, boolean



.. index::
  single: auto_picking field
.. 




:date_from: From Date, date, readonly



.. index::
  single: date_from field
.. 




:track_outgoing: Track Outging Lots, boolean

    *Force to use a Production Lot during deliveries*

.. index::
  single: track_outgoing field
.. 




:length: Length, float



.. index::
  single: length field
.. 




:turnover: Turnover, float, readonly

    *Sum of Multification of Invoice price and quantity of Customer Invoices*

.. index::
  single: turnover field
.. 




:property_account_income_world: Outside Europe Income Account, many2one

    *This account will be used, instead of the default one, to value incoming stock for the current product*

.. index::
  single: property_account_income_world field
.. 




:is_maintenance: Is Maintenance?, boolean



.. index::
  single: is_maintenance field
.. 




:online: Visible on website, boolean



.. index::
  single: online field
.. 




:uom_po_id: Purchase UoM, many2one, required

    *Default Unit of Measure used for purchase orders. It must in the same category than the default unit of measure.*

.. index::
  single: uom_po_id field
.. 




:intrastat_id: Intrastat code, many2one



.. index::
  single: intrastat_id field
.. 




:description: Description, text



.. index::
  single: description field
.. 




:list_price_index: Indexed list price, float, readonly



.. index::
  single: list_price_index field
.. 




:property_account_expense_europe: Expense Account for Europe, many2one

    *This account will be used, instead of the default one, to value outgoing stock for the current product*

.. index::
  single: property_account_expense_europe field
.. 




:price: Customer Price, float, readonly



.. index::
  single: price field
.. 




:index_date: Index price date, date, required



.. index::
  single: index_date field
.. 




:collection: Collection, many2one



.. index::
  single: collection field
.. 




:membership: Membership, boolean

    *Specify if this product is a membership product*

.. index::
  single: membership field
.. 




:loc_row: Row, char



.. index::
  single: loc_row field
.. 




:seller_delay: Supplier Lead Time, integer, readonly

    *This is the average delay in days between the purchase order confirmation and the reception of goods for this product and for the default supplier. It is used by the scheduler to order requests based on reordering delays.*

.. index::
  single: seller_delay field
.. 




:manufacturer_pref: Manufacturer product code, char



.. index::
  single: manufacturer_pref field
.. 




:author_ids: Authors, many2many



.. index::
  single: author_ids field
.. 




:pocket: Pocket, char



.. index::
  single: pocket field
.. 




:link_ids: Related Books, many2many



.. index::
  single: link_ids field
.. 




:equivalency_in_A4: A4 Equivalency, float



.. index::
  single: equivalency_in_A4 field
.. 




:url: Image URL, char

    *Add Product Image URL.*

.. index::
  single: url field
.. 




:produce_delay: Manufacturing Lead Time, float

    *Average time to produce this product. This is only for the production order and, if it is a multi-level bill of material, it's only for the level of this product. Different delays will be summed for all levels and purchase orders.*

.. index::
  single: produce_delay field
.. 




:property_account_expense: Expense Account, many2one

    *This account will be used, instead of the default one, to value outgoing stock for the current product*

.. index::
  single: property_account_expense field
.. 




:categ_id: Category, many2one, required



.. index::
  single: categ_id field
.. 




:calculate_price: Compute price, boolean



.. index::
  single: calculate_price field
.. 




:invoice_state: Invoice State, selection, readonly



.. index::
  single: invoice_state field
.. 




:outgoing_qty: Outgoing, float, readonly

    *Quantities of products that are planned to leave in selected locations or all internal if none have been selected.*

.. index::
  single: outgoing_qty field
.. 




:alert_time: Product alert time, integer



.. index::
  single: alert_time field
.. 




:taxes_id: Product Taxes, many2many



.. index::
  single: taxes_id field
.. 




:y: Y of Product, float



.. index::
  single: y field
.. 




:date_parution: Release date, date



.. index::
  single: date_parution field
.. 




:total_margin: Total Margin, float, readonly

    *Turnorder - Total Cost*

.. index::
  single: total_margin field
.. 




:index_sale: Sales indexes, many2many



.. index::
  single: index_sale field
.. 




:buyer_price: Buyer price, float



.. index::
  single: buyer_price field
.. 




:unique_production_number: Unique Production Number, boolean



.. index::
  single: unique_production_number field
.. 



Object: Includes Hotel Restaurant Table
#######################################

.. index::
  single: Includes Hotel Restaurant Table object
.. 


:capacity: Capacity, integer



.. index::
  single: capacity field
.. 




:name: Table number, char, required



.. index::
  single: name field
.. 



Object: Includes Hotel Restaurant Reservation
#############################################

.. index::
  single: Includes Hotel Restaurant Reservation object
.. 


:end_date: End Date, datetime, required



.. index::
  single: end_date field
.. 




:room_no: Room No, many2one



.. index::
  single: room_no field
.. 




:tableno: Table number, many2many



.. index::
  single: tableno field
.. 




:partner_address_id: Address, many2one



.. index::
  single: partner_address_id field
.. 




:state: state, selection, required, readonly



.. index::
  single: state field
.. 




:cname: Customer Name, many2one, required



.. index::
  single: cname field
.. 




:reservation_id: Reservation No, char, required



.. index::
  single: reservation_id field
.. 




:start_date: Start Date, datetime, required



.. index::
  single: start_date field
.. 



Object: Includes Hotel Restaurant Order
#######################################

.. index::
  single: Includes Hotel Restaurant Order object
.. 


:tableno: Table number, many2many



.. index::
  single: tableno field
.. 




:room_no: Room No, char, readonly



.. index::
  single: room_no field
.. 




:w_name: Waiter Name, char, readonly



.. index::
  single: w_name field
.. 




:kot_date: Date, datetime



.. index::
  single: kot_date field
.. 




:orderno: Order Number, char, readonly



.. index::
  single: orderno field
.. 




:resno: Reservation Number, char



.. index::
  single: resno field
.. 




:kot_list: Order List, one2many



.. index::
  single: kot_list field
.. 



Object: Includes Hotel Restaurant Order
#######################################

.. index::
  single: Includes Hotel Restaurant Order object
.. 


:room_no: Room No, many2one



.. index::
  single: room_no field
.. 




:order_no: Order Number, char, required



.. index::
  single: order_no field
.. 




:tax: Tax (%) , float



.. index::
  single: tax field
.. 




:table_no: Table number, many2many



.. index::
  single: table_no field
.. 




:amount_subtotal: Subtotal, float, readonly



.. index::
  single: amount_subtotal field
.. 




:o_date: Date, datetime, required



.. index::
  single: o_date field
.. 




:order_list: Order List, one2many



.. index::
  single: order_list field
.. 




:amount_total: Total, float, readonly



.. index::
  single: amount_total field
.. 




:waiter_name: Waiter Name, many2one, required



.. index::
  single: waiter_name field
.. 



Object: Reservation Order
#########################

.. index::
  single: Reservation Order object
.. 


:date1: Date, datetime, required



.. index::
  single: date1 field
.. 




:order_list: Order List, one2many



.. index::
  single: order_list field
.. 




:amount_subtotal: Subtotal, float, readonly



.. index::
  single: amount_subtotal field
.. 




:reservationno: Reservation No, char



.. index::
  single: reservationno field
.. 




:tax: Tax (%) , float



.. index::
  single: tax field
.. 




:waitername: Waiter Name, many2one



.. index::
  single: waitername field
.. 




:order_number: Order No, char



.. index::
  single: order_number field
.. 




:table_no: Table number, many2many



.. index::
  single: table_no field
.. 




:amount_total: Total, float, readonly



.. index::
  single: amount_total field
.. 



Object: Includes Hotel Restaurant Order
#######################################

.. index::
  single: Includes Hotel Restaurant Order object
.. 


:o_list: unknown, many2one



.. index::
  single: o_list field
.. 




:item_qty: Qty, char, required



.. index::
  single: item_qty field
.. 




:name: Item Name, many2one, required



.. index::
  single: name field
.. 




:kot_order_list: unknown, many2one



.. index::
  single: kot_order_list field
.. 




:price_subtotal: Subtotal, float, readonly



.. index::
  single: price_subtotal field
.. 




:o_l: unknown, many2one



.. index::
  single: o_l field
.. 




:item_rate: Rate, float



.. index::
  single: item_rate field
.. 

