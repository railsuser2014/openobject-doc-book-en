
How to translate the Open Object Documentation
==============================================

Translation workflow
--------------------

Here is the translation workflow:

.. csv-table::
    :header: "Transition","Activity","Destination directory"
    :widths: 5,5,5

    untranslated sources,,source
    ,create the templates,
    translation templates,,i18n/source/<lang>
    ,translate the files,
    translated files,,i18n/source/<lang>
    ,copy the translated files,
    translated files,,i18n/build/<lang>

Creating the translation templates
----------------------------------

You start with *untranslated sources* located in **<openobject-doc>/source**

Use the *build_i18n.py* script to create the templates. Exemple: ::

  ./build_i18n.py create-templates fr

The first argument is the command you want to use.

The second argument is the language you want to translate to.

The translation templates will be created in *i18n/source/<lang>*. For example, in *i18n/source/fr*.

Translating the files
---------------------

The template structure for a given file is very simple. Each text section is
prepended by the original context. Here is a title, for exemple: ::

  .. i18n: %%%%%%%%%%%%%%%%%%%%%%%%%
  .. i18n: Open Object Documentation
  .. i18n: %%%%%%%%%%%%%%%%%%%%%%%%%

  %%%%%%%%%%%%%%%%%%%%%%%%%
  Open Object Documentation
  %%%%%%%%%%%%%%%%%%%%%%%%%

The context is a commented section starting with *i18n:*. It helps you
understand the section in its context. It also helps you remember the original
section.

Here is the translated section: ::

  .. i18n: %%%%%%%%%%%%%%%%%%%%%%%%%
  .. i18n: Open Object Documentation
  .. i18n: %%%%%%%%%%%%%%%%%%%%%%%%%

  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  Documentation sur Open Object
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Copy the translated files
-------------------------

Once the files are translated, the next step is to copy them to the
*i18n/build/<lang>* directory. This step will also remove the context sections.
For example, with french language: ::

  ./build_i18n.py copy-translated fr

Files will be copied in *i18n/build/fr* where you can use them to build you
documentation in your language.

Translation memory
------------------

Translation memory is handled by a Python pickled dictionnary following this
structure: ::

  {
    "<lang1>": {
      "original section text 1": "translated section text 1",
      "original section text 2": "translated section text 2",
    },
    "<lang2>": {
      "original section text 1": "translated section text 1",
      "original section text 2": "translated section text 2",
    }
  }

This file is named *i18n.pickle* and it's created by the *copy-translated*
command. And read by the *create-templates* command.

So, you'll benefits from already translated contents translated by others.

The *i18n.pickle* file is versioned. If you translate some texts, don't forget
to commit your work in Bazaar.

Status
------

At the moment, this script is in alpha status and has not been thoroughly
tested. It should work but expects some bugs to pop up at unexpected times.


.. vi: ft=rst

